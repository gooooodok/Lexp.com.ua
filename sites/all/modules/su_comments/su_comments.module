<?php

function su_comments_comment_insert($comment) {
  // If this comment is not published and the user does not have the rights to
  // see unpublished comments, store the cid in the session.
  if ($comment->status == COMMENT_NOT_PUBLISHED && !user_access('administer comments')) {
    $_SESSION['su_comments'][] = $comment->cid;
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function su_comments_query_comment_filter_alter(QueryAlterableInterface $query) {
  // Only alter the query if the user does not have administer comments
  // permission and has a session.
  if (!user_access('administer comments') && !empty($_SESSION['su_comments'])) {
    $conditions = &$query->conditions();
    // Remove status condition.
    foreach ($conditions as $key => $condition) {
      if (is_array($condition)
      && is_string($condition['field'])
      && $condition['field'] == 'c.status'
      && $condition['value'] == COMMENT_PUBLISHED) {
        unset($conditions[$key]);

        // Add a new condition to only show published comments or those created
        // by this session.
        $or = db_or();
        $or->condition('c.status', COMMENT_PUBLISHED);
        $or->condition('c.cid', $_SESSION['su_comments']);
        $query->condition($or);
        return;
      }
    }
  }
}

/**
 * Implements hook_node_view()
 *
 * We duplicate code from comment_node_page_additions() to add the
 * comment thread. We run this only when the original code is not
 * run due to $node->comment_count being zero.
 *
 * @see comment_node_page_additions()
 */
function su_comments_node_view($node, $view_mode) {
  // this first condition is copied from comment_node_view():
  // add comments only if we are on the node page, in "full" view mode
  if ($node->comment && $view_mode == 'full' && node_is_page($node) && empty($node->in_preview)) {
    if (empty($node->content['comments']['comments']) && $node->comment_count == 0 && isset($_SESSION['su_comments'])) {
      // there are no published comments (so the comment thread has not been
      // built), but there may be an unpublished comment that we need to show.
      $mode = variable_get('comment_default_mode_' . $node->type, COMMENT_MODE_THREADED);
      $comments_per_page = variable_get('comment_default_per_page_' . $node->type, 50);
      if ($cids = comment_get_thread($node, $mode, $comments_per_page)) {
        $comments = comment_load_multiple($cids);
        comment_prepare_thread($comments);
        $build = comment_view_multiple($comments, $node);
        $build['pager']['#theme'] = 'pager';
        $node->content['comments']['comments'] = $build;
      }
    }
  }
}

/**
 * Implements hook_comment_view_alter().
 */
function su_comments_comment_view_alter(&$build) {
  // Only act on comments which are not published and if this user does not have
  // administer comments permission, and comment is in $_SESSION
  if ($build['#comment']->status == COMMENT_NOT_PUBLISHED
    && !user_access('administer comments')
    && !empty($_SESSION['su_comments'])
    && in_array($build['#comment']->cid, $_SESSION['su_comments'])) {
    // Hide the reply link as trying to reply results in an error that there is
    // no such comment.
    unset($build['links']['comment']['#links']['comment-reply']);

    $build['su_comments'] = array(
      '#markup' => '<span class="su-comments-unpublished">' . t('Your comment is awaiting moderation.') . '</span>',
      '#attached' => array(
        'css' => array(drupal_get_path('module', 'su_comments') . '/su_comments.css'),
      ),
    );
  }
}
